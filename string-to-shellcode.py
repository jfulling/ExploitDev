#!/usr/bin/env python3

import sys,math

string = str(sys.argv[1])

def hexify(hexme):
    result = ""
    for letter in hexme:
        result += str(hex(ord(letter)))[2:]
    return result

def recurse_remainder(remaining,stack):
    if(remaining > 0):
#       Until there is an architecture greater than 64 bytes,
#       we cannot have a remainder equal to or greater than a QWORD
        if(remaining > 4):
            letters = string[len(string)-remaining:len(string)-remaining+4]
            stack.append("push DWORD 0x%s" % hexify(letters))
            recurse_remainder(remaining-4,stack)
        elif(remaining > 2):
            letters = string[len(string)-remaining:len(string)-remaining+2]
            stack.append("push WORD 0x%s" % hexify(letters))
            return recurse_remainder(remaining-2,stack)
        else:
            letters = string[len(string)-1]
            stack.append("push BYTE 0x%s" % hexify(letters))
            return stack
    else:
        return



def main():

    if(len(sys.argv) != 3):
        print("\nUsage: %s <string to convert> <CPU register size>" % str(sys.argv[0]))
        print("\nExample: %s \"Hello, world!\" 32\n" % str(sys.argv[0]))
        sys.exit(1)

    if(math.log(int(sys.argv[2]), 2).is_integer()):
        letter_buf = int(sys.argv[2]) // 8

        groups = len(sys.argv[1]) // letter_buf
        remaining = len(sys.argv[1]) % letter_buf

        remainder_stack = []
        remainder_stack = recurse_remainder(remaining,remainder_stack)


        group_stack = []
        for group in range(0,groups):
            group_stack.append("push 0x%s" % hexify(string[group*letter_buf:group*letter_buf+letter_buf]))

        while(remainder_stack):
            print(remainder_stack.pop())


        while(group_stack):
            print(group_stack.pop())
    else:
        print("\nError: CPU architecture must be a power of 2!\n")

if __name__ == '__main__':
    main()
